// Code generated by MockGen. DO NOT EDIT.
// Source: demo.go

// Package demo is a generated GoMock package.
package demo

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockReverser is a mock of Reverser interface.
type MockReverser struct {
	ctrl     *gomock.Controller
	recorder *MockReverserMockRecorder
}

// MockReverserMockRecorder is the mock recorder for MockReverser.
type MockReverserMockRecorder struct {
	mock *MockReverser
}

// NewMockReverser creates a new mock instance.
func NewMockReverser(ctrl *gomock.Controller) *MockReverser {
	mock := &MockReverser{ctrl: ctrl}
	mock.recorder = &MockReverserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReverser) EXPECT() *MockReverserMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockReverser) Count(str string) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", str)
	ret0, _ := ret[0].(int)
	return ret0
}

// Count indicates an expected call of Count.
func (mr *MockReverserMockRecorder) Count(str interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockReverser)(nil).Count), str)
}

// Reverse mocks base method.
func (m *MockReverser) Reverse(str string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reverse", str)
	ret0, _ := ret[0].(string)
	return ret0
}

// Reverse indicates an expected call of Reverse.
func (mr *MockReverserMockRecorder) Reverse(str interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reverse", reflect.TypeOf((*MockReverser)(nil).Reverse), str)
}
